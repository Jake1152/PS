빙산 08DEC20  4h 20min

지구 온난화로 인하여 북근의 빙산이 녹고 있다.
빙산을 그림1과 같이 2차워 1배열에 표시한다고 하자.
빙산의 각 부분별 높이 정보는 배열의 각 칸에 양의 정수로 저장된다.
빙산 이욍의 바다에 해당되는 칸에는 0이 저장된다.
그림1에서 빈칸은 모두 0으로 채워져있다고 생각한다.

행의 개수가 5이고
열의 개수가 7인 2차원 배열에 저장된 방산의 높이 정보
빙산의 높이는 바닷물에 많이 접해있는 부분에서 더 빨리 줄어들기 때문에
배열에서 빙산의 각 부분에 해당되는 칸에 있는 높이는 
일년마다 그칸에 동서남북 네 방향으로 붙어있는 0이 저장된 칸의 개수만큼
줄어든다. 단, 각 칸에 저장된 높이는 0보다 더 줄어들지 않는다. 바닷물은
호수처럼 빙산에 둘러싸여 있을 수도 있다. 따라서 그림1의 빙산은 일년 후에 그림2와 같이
변형된다.

그림3은 그림1의 빙산이 2년 후에 변한 모습을 보여준다. 2차원 배열에서 동서남북 방향으로 붙어있는 칸들은 서로 연결되어 있다고 말한다.
따라서 그림2의 빙산은 한 덩어리이지만, 그림3의 빙산은 세 덩어리로 분리되어 있다.

"한 덩어리의 빙산이 주어질때, 이 빙산이 두 덩어리 이상으로 분리되는
최초의 시간을 구하는 프로그램을 작성."
만약 전부 다 녹을 떄까지 두 덩어리 이상으로 분리되지 않으면 프로그램은 0을 출력

#문제이해
주어지는 빙산의 배열
빙산의 각 칸들은 주변에(위아래&왼오른쪽만 해당, 대각X) 바다(0)로 된 칸의 개수만큼 1씩 녹는다.
빙산이 녹아서 두 덩어리 '이상'으로 갈라지는 최초시간을 결과값으로 반환
만약 다 녹을때까지 두 덩어리가 안된다면 0을 반환


#문제해결방법
만약 다 얼음으로 뒤덮여 있다면?
끝나지 않는다.
그렇다면 반복 조건을 어떻게 줄것인가?

얼음이 녹을때까지, 바다가 한칸이라도 있으면 1이라도 감소한다.


- 입력값 row, col로 나누어 받는다
- row만큼 반복하여 빙산,바다 배열을 받는다.
- 2D 얼음배열을 만든다.
  [[x,y,height], [x,y,height]]
- 얼음배열 길이가 row *col과 같으면 return 0
  얼음으로만 덮여있으므로 녹지 않음
 
- 빙산이 녹을동안(얼음배열이 빌때까지) 반복

  - 다른 function에서 빙산이 몇 덩어리인지 체크  
    몇 덩어리인지는 얼음배열을 순회해서 확인 
    visit = [] 사용
    block_count=0
    덩어리 발견마다 +1
    block_count >=2 이면 return year

  - 얼음배열을 순회한다. 
  - 얼음 주변(상하좌우)의 0의 개수만큼 숫자를 감소. 최저숫자는 0
    감소는 얼음배열, 초기배열 둘다 같이 한다.
    - 0이되면 얼음배열에서 해당 부분을 pop
  - 모든 0이 아닌 칸에 대해 위와 같은 작업을 한다. 모든 빙하의 얼음을 확인하는 것을 1턴으로 본다
  - 1턴이 지날때마다 얼음이 쪼개어졌는지 확인한다.
    

어떻게 풀것인가?
- 얼음 칸들 확인. 중복되지않게.
  - 얼음 칸 배열을 별도로 준비?
  - 얼음칸 위치를 별도의 메모리없이 확인하는 법
  - 얼음칸을 일정한 순회방식으로 중복되지 않게 확인해서 녹는지 확인
  - 1턴 수행마다 year +=1
  
  예외
  - 바다인 칸이 1개도 없으면 0리턴
    이 부분을 별도 확인 조건을 안해도 
	얼음칸을 확인하는 루틴에서 처리될수 있도록 만들기.
	
- 매 턴마다 얼음이 쪼개졌는지 확인
  - 얼음덩어리의 기준
    얼음 1개에서 상하좌우로 연결되어있는지
	얼음 위치를 모두 순회해서 연결되어있는지
	얼음을 모두 순회할때까지 반복
	단, 얼음덩어리가 2개 이상이면 return year
	
	얼음덩어리를 확인하는 작업은 어떻게 진행할 것인가?
	dfs, stack?
	
  - 쪼개짐의 기준 
    - 얼음덩어리 주변(상하좌우)이 0으로 둘러싸여있는지.
	


#실행
- pop부분 초기에 문제내포하여 수정
  area배열은, iceberg가 녹은다음에 적용되도록 만듦
- 런타임 에러 발생
  원인: 재귀호출 제한 때문에 발생 
  재귀횟수 제한을 10만으로 연장
  

#반성
- iceberg 등의 배열없이 구현하는 방법 고민이 필요
- 프로그램 구조가 깔끔하지 못한 점
  ex) 얼음덩어리 개수 확인하기 위해 visited 배열을 만들어서 넘기는 점
- 재귀가 아닌 반복으로도 짤 것
- python 런타임 에러에 대한 오해
  테스트 케이스는 통과되는데 이후에 안되는 것에 대해
  인덱스 오류라 생각한 점.
  recursive 제한 때문에 발생한 것을 몰랐다.



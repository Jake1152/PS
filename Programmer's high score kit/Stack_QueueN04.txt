Queue03 120720

12-15.07  14-15일 1시간 50분소요    총 2시간 30분 

일반적인 프린터는 인쇄 요청이 들어온 순서대로 인쇄합니다. 그렇기 때문에 중요한 문서가 나중에 인쇄될 수 있습니다. 
이런 문제를 보완하기 위해 중요도가 높은 문서를 먼저 인쇄하는 프린터를 개발했습니다. 이 새롭게 개발한 프린터는 아래와 같은 방식으로 인쇄 작업을 수행합니다.

1. 인쇄 대기목록의 가장 앞에 있는 문서(J)를 대기목록에서 꺼냅니다.
2. 나머지 인쇄 대기목록에서 J보다 중요도가 높은 문서가 한 개라도 존재하면 J를 대기목록의 가장 마지막에 넣습니다.
3. 그렇지 않으면 J를 인쇄합니다.
예를 들어, 4개의 문서(A, B, C, D)가 순서대로 인쇄 대기목록에 있고 중요도가 2 1 3 2 라면 C D A B 순으로 인쇄하게 됩니다.

내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 알고 싶습니다. 위의 예에서 C는 1번째로, A는 3번째로 인쇄됩니다.

현재 대기목록에 있는 문서의 중요도가 순서대로 담긴 배열 priorities와 내가 인쇄를 요청한 문서가 
현재 대기목록의 어떤 위치에 있는지를 알려주는 location이 매개변수로 주어질 때,
내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 return 하도록 solution 함수를 작성해주세요.

제한사항
현재 대기목록에는 1개 이상 100개 이하의 문서가 있습니다.
인쇄 작업의 중요도는 1~9로 표현하며 숫자가 클수록 중요하다는 뜻입니다.
location은 0 이상 (현재 대기목록에 있는 작업 수 - 1) 이하의 값을 가지며 대기목록의 가장 앞에 있으면 0, 두 번째에 있으면 1로 표현합니다.
입출력 예
priorities	location	return
[2, 1, 3, 2]	2	1
[1, 1, 9, 1, 1, 1]	0	5
입출력 예 설명
예제 #1

문제에 나온 예와 같습니다.

예제 #2

6개의 문서(A, B, C, D, E, F)가 인쇄 대기목록에 있고 중요도가 1 1 9 1 1 1 이므로 C D E F A B 순으로 인쇄합니다.

1. 문제이해
2. 문제 재정의(나만의 언어로)
3. 문제해결방법 계획
4. 해결계획 검토
5. 문제해결 진행(프로그래밍)
6. 다른방법 있었는지 확인

1. 문제이해 
프린터에 우선순위가 표시된 작업목록이 들어온다.
큐 맨 앞에 있는 것의 우선순위보다 대기열의 우선순위가 높은게 없다면 
큐 맨 앞에 있는 요소를 출력한다.
그렇지않으면 큐 맨 앞에 있던 요소는 큐 맨 뒤에 넣는다.
다시 다음 요소의 우선순위와 대기열 요소들의 우선순위를 비교한다.
이때 맨 처음 큐에서 특정위치에 있는 문서가 몇번쨰로 출력되는지 알고자 한다.

2. 문제해결방법 계획
메소드에 넘어오는 전달인수(argument)는 우선순위만 표현되어있다.
전달인수로 전달받는 인덱스에 있는 배열의 요소가 위치가 변경(우선순위가 낮아서 큐 맨뒤로 바뀌는 경우)되는 경우에 
어떤 위치로 갔는지 인식할 수 있어야한다. 그래야 언제 몇번째로 출력되었는지 확인할 수 있다.
만약 확인해야하는 문서가 1개가 아니라 여러개라면? 
모든 문서에 대해 몇번째로 빠져나가는지 확인해야하는 방식이라면?(확장성)
우선순위 이외에 hash로 기존위치를 숫자로 표기한다?
해당배열을 hash로 표현 
우선순위 이외에 각 배열요소의 초기 위치 값을 추가한다.
그것 이외에 확인할 수 있는 방법이 있는가?
초기에 알고자하는 특정 위치 요소값에 문자를 하나 더 한다. 
계산할때는 문자를 떼고 숫자만으로 계산하고 그 요소값이 몇번째로 출력되는지만 반환
(단점 확장성이 낮음, 1개만 확인 가능하며 그 1개 때문에 다른 경우도 문자가 포함되어있는지 확인하는 루틴이 들어가야함)

hash로하면 모든 배열에 부여하는 방식이라 1개만 확인하고자 한다면 그 또한 불필요하게 커지는 작업이 될수 있다. 
하지만 확장성의 측면과 해당 값들만 처리하면 되기에 간편한 면이있다.

hash로 진행하는 경우 언제 특정위치에 있던 값이 출력되는지 확인하게 할것인가?
매번 출력이 진행될때마다(pop) 확인할 것인가 
아니면 별도의 hash를 만들어서 pop된 것들을 집어넣을것인가?
이 방법은 확장성 측면에서는 도움 단, 모든 값이 처리되어야만 확인가능
혹은 계속 중복확인하는 방법으로 대체  새 hash에 출력순서대로 집어넣고 그때마다 찾고자하던 값이 들어왔는지 새 hash에다가 확인
새 hash에 추가하는 작업 + 해당 값 있는지 찾는 작업 

1개만 확인이니 출력 진행될때마다 해당 위치에 있던 값인지 확인한다.

특정위치에 있는 것을 인식할 수 있어야한다.



방법1. hash사용 
위에 언급한 내용처럼 hash를 이용한다.
초기 전달인수들을 새로운 hash에 default_index hash키와 index 값, priorities 키와 해당 값으로 엮어서 집어넣는다.

그다음에는 해당 hash를 가지고 프린터 작업을 우선순위와 비교해가며 진행

hash 열 제일 앞에 있는 값을 뽑고 그 hash값의 priorities값과 hash 대기열에 있는 priorities 값보다 크면 출력한다.
작으면 hash열 맨뒤로 옮긴다(맨 앞에서 삭제하고 뒤로 넣는다.)

이때 출력된 경우 "결과값 해쉬배열"에 값을 추가한다.

추가할때마다 결과값 해쉬배열에 확인하고자하는 값이 있는지 확인한다.





